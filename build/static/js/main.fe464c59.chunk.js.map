{"version":3,"sources":["components/bg.mp4","components/JoinForm.js","components/Peer.js","components/chat.js","components/ButtonBar.js","components/Room.js","components/Notifications.js","App.js","index.js"],"names":["JoinForm","hmsActions","useHMSActions","useState","name","token","inputValues","setInputValues","handleInputChange","e","prevValues","target","value","className","autoPlay","muted","loop","src","backgroundVideo","type","onSubmit","preventDefault","join","userName","authToken","onChange","id","placeholder","Peer","peer","videoRef","useRef","videoTrack","useHMSStore","selectVideoTrackByPeerID","useEffect","current","enabled","attachVideo","detachVideo","ref","isLocal","relativeTime","require","localizedFormat","dayjs","Chat","getMessages","selectHMSMessages","inputMessage","setInputMessage","typedMessages","a","sendBroadcastMessage","map","data","console","log","senderName","time","format","message","onClick","ButtonBar","selectPeers","selectLocalPeer","videoEnabled","selectIsLocalVideoEnabled","audioEnabled","selectIsLocalAudioEnabled","isConnected","selectIsConnectedToRoom","selectIsLocalScreenShared","selectPeerScreenSharing","toggleChat","setToggleChat","setLocalAudioEnabled","size","alt","setLocalVideoEnabled","leave","Room","peers","style","backgroundColor","Notification","notification","useHMSNotifications","HMSNotificationTypes","PEER_JOINED","PEER_LEFT","NEW_MESSAGE","ERROR","code","RECONNECTING","RECONNECTED","App","window","onunload","rootElement","document","getElementById","ReactDOM","render","appBuilder","theme"],"mappings":"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","file":"static/js/main.fe464c59.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg.7345163b.mp4\";","import { useState } from \"react\";\nimport backgroundVideo from './bg.mp4';\nimport {\n  useHMSActions,\n  useHMSStore,\n  selectIsLocalAudioEnabled,\n  selectIsLocalVideoEnabled,\n} from \"@100mslive/hms-video-react\";\n\nconst JoinForm = () => {\n  const hmsActions = useHMSActions();\n  const [inputValues, setInputValues] = useState({\n    name: \"\",\n    token: \"\",\n  });\n\n  const handleInputChange = (e) => {\n    setInputValues((prevValues) => ({\n      ...prevValues,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    hmsActions.join({\n      userName: inputValues.name,\n      authToken: inputValues.token,\n    });\n  };\n\n  return (\n    <>\n    <div className=\"showcase\">\n    <video autoPlay muted loop >\n         <source src={backgroundVideo} type=\"video/mp4\" />\n    </video>\n    <div className=\"overlay\"></div>\n    <form onSubmit={handleSubmit}>\n      <h2 className=\"heading\">Join Room</h2>\n      <div className=\"input-container\">\n        <input\n          className=\"inputfield\"\n          value={inputValues.name}\n          onChange={handleInputChange}\n          id=\"name\"\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n        />\n      </div>\n      <div className=\"input-container\">\n        <input\n          className=\"inputfield\"\n          value={inputValues.token}\n          onChange={handleInputChange}\n          id=\"token\"\n          type=\"text\"\n          name=\"token\"\n          placeholder=\"Auth token\"\n        />\n      </div>\n      <button className=\"btn-primary\">Join</button>\n    </form>\n    </div>\n    </>\n  );\n};\n\nexport default JoinForm;","import {\n  selectVideoTrackByPeerID,\n  useHMSActions,\n  useHMSStore,\n} from \"@100mslive/hms-video-react\";\nimport { useRef, useEffect } from \"react\";\n\nconst Peer = ({ peer }) => {\n  const videoRef = useRef(null);\n  const hmsActions = useHMSActions();\n  const videoTrack = useHMSStore(selectVideoTrackByPeerID(peer.id));\n  \n  useEffect(() => {\n    if (videoRef.current && videoTrack) {\n      if (videoTrack.enabled) {\n        hmsActions.attachVideo(videoTrack.id, videoRef.current);\n      } else {\n        hmsActions.detachVideo(videoTrack.id, videoRef.current);\n      }\n    }\n  }, [videoTrack, hmsActions]);\n\n  return (\n    <div className=\"peer-container\">\n      <video\n        ref={videoRef}\n        className={`peer-video ${peer.isLocal ? \"local\" : \"\"}`}\n        autoPlay\n        muted\n      />\n      <div className=\"peer-name\">\n        {peer.name} {peer.isLocal ? \"(You)\" : \"\"}\n      </div>\n    </div>\n  );\n};\n\nexport default Peer;","import {\n  useHMSActions,\n  useHMSStore,\n  selectLocalPeer,\n  selectPeers,\n  selectHMSMessages,\n  selectMessagesByRole,\n  selectMessagesByPeerID,\n  selectBroadcastMessages,\n\n} from \"@100mslive/hms-video-react\";\nimport { useState, useEffect } from \"react\";\nimport React from \"react\";\nimport \"dayjs/locale/es\";\nimport * as dayjs from \"dayjs\";\n\nconst relativeTime = require(\"dayjs/plugin/relativeTime\");\nconst localizedFormat = require(\"dayjs/plugin/localizedFormat\");\ndayjs.extend(relativeTime);\ndayjs.extend(localizedFormat);\n\nconst Chat = () => {\n  const hmsActions = useHMSActions();\n  const getMessages = useHMSStore(selectHMSMessages);\n  const [inputMessage, setInputMessage] = useState(\"\");\n\n  const typedMessages = async () => {\n    await hmsActions.sendBroadcastMessage(inputMessage);\n    setInputMessage(\"\");\n  };\n\n  const handleOnKeyDownEvent = (e) => {\n    if (e.keyCode === 13) {\n      typedMessages(inputMessage);\n      setInputMessage(\"\");\n    }\n  };\n  function renderMessages(data) {\n    console.log(data);\n    return (\n      <>\n        <div>\n          <div className=\"message-sender\" key={data.id}>\n            {data.senderName}\n            <div className=\"date\">{dayjs(data.time).format(\"LT\")}</div>\n          </div>\n          <div className=\"message \">{data.message} </div>\n        </div>\n      </>\n    );\n  }\n\n \n\n  return (\n    <>\n      <div className=\"chat\">\n        <div className=\"chat-title\">\n          <h2> Inbox </h2>\n        </div>\n\n        <div className=\"messages\">\n          <div className=\"messages-content scrollbar \">\n            {getMessages.map(renderMessages)}\n          </div>\n        </div>\n\n        <div className=\"message-box\">\n          <textarea\n            type=\"text\"\n            className=\"message-input\"\n            placeholder=\"Type a message . . .\"\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n          ></textarea>\n          <button className=\"message-submit\" type=\"button\" onClick={typedMessages}>\n            Send\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Chat;\n\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport { BiMicrophone } from \"react-icons/bi\";\nimport { BiMicrophoneOff } from \"react-icons/bi\";\nimport { BiVideo } from \"react-icons/bi\";\nimport { BiVideoOff } from \"react-icons/bi\";\nimport { AiOutlineSetting } from \"react-icons/ai\";\nimport { FaPhone } from \"react-icons/fa\";\nimport { MdScreenShare } from \"react-icons/md\";\nimport { MdStopScreenShare } from \"react-icons/md\";\nimport {\n  useHMSActions,\n  useHMSStore,\n  selectPeers,\n  selectLocalPeer,\n  selectIsLocalAudioEnabled,\n  selectIsConnectedToRoom,\n  selectIsLocalVideoEnabled,\n  selectPeerScreenSharing,\n  selectIsLocalScreenShared,\n  selectScreenShareByPeerID,\n} from \"@100mslive/hms-video-react\";\nimport Chat from \"./chat\";\n\nconst ButtonBar = ({ peer }) => {\n  const peers = useHMSStore(selectPeers);\n  const localPeer = useHMSStore(selectLocalPeer);\n  const videoEnabled = useHMSStore(selectIsLocalVideoEnabled);\n  const audioEnabled = useHMSStore(selectIsLocalAudioEnabled);\n  const hmsActions = useHMSActions();\n  const isConnected = useHMSStore(selectIsConnectedToRoom);\n  const amIScreenSharing = useHMSStore(selectIsLocalScreenShared);\n  const presenter = useHMSStore(selectPeerScreenSharing);\n  const [toggleChat, setToggleChat] = useState(true);\n\n  // const screenshareVideoTrack = useHMSStore(selectScreenShareByPeerID(peerId));\n\n  const toggleAudio = () => {\n    hmsActions.setLocalAudioEnabled(!audioEnabled);\n  };\n\n  const toggleScreenShare = async () => {\n    try {\n      await hmsActions.setScreenShareEnabled(!amIScreenSharing);\n    } catch (error) {\n      console.error(error, \"Screen not Shared\");\n    }\n  };\n\n  const toggleVideo = () => {\n    hmsActions.setLocalVideoEnabled(!videoEnabled);\n  };\n\n  return (\n    <>\n      <div className=\"control-bar\">\n        <button\n          className=\"chatbox-btn\"\n          onClick={() => setToggleChat(!toggleChat)}\n        >\n          In-call Messages\n        </button>\n        {toggleChat ? <Chat /> : null}\n        <div className=\"center-buttons\">\n          {/*<button\n                      className=\"features btn-toggle\"\n                      onClick={() => toggleScreenShare()}\n                    >\n                      {amIScreenSharing ? (\n                        <MdStopScreenShare size=\"3em\" />\n                      ) : (\n                        <MdScreenShare size=\"3em\" />\n                      )}\n                    </button>\n          */}\n          <nav>\n            <button className=\"btn-control\" onClick={toggleAudio}>\n              {audioEnabled ? (\n                <BiMicrophone size=\"1.8em\" />\n              ) : (\n                <BiMicrophoneOff size=\"1.8em\" />\n              )}\n            </button>\n            <button\n              className=\"btn-control\"\n              alt=\"Leave Room\"\n              onClick={toggleVideo}\n            >\n              {videoEnabled ? (\n                <BiVideo size=\"1.8em\" />\n              ) : (\n                <BiVideoOff size=\"1.8em\" />\n              )}\n            </button>\n          </nav>\n          {isConnected && (\n            <FaPhone\n              size=\"2em\"\n              id=\"leave-btn\"\n              className=\"btn-danger\"\n              onClick={() => hmsActions.leave()}\n            />\n          )}\n        </div>\n        <div className=\"App-name\">VidChat</div>\n      </div>\n    </>\n  );\n};\n\nexport default ButtonBar;","import { useState, useEffect } from \"react\";\nimport { selectPeers, useHMSStore } from \"@100mslive/hms-video-react\";\nimport Peer from \"./Peer\";\nimport Chat from \"./chat\";\nimport ButtonBar from \"./ButtonBar\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst Room = () => {\n  const peers = useHMSStore(selectPeers);\n const [toggleChat, setToggleChat] = useState(true);\n\n  return (\n    <div className=\"grid-container\" style={{ backgroundColor: \"#1B2156\" }}>\n\n      <div className=\"peers-container\">\n        {peers.map((peer) => (\n          <Peer key={peer.id} peer={peer} />\n        ))}\n\n\n      </div>\n      <div className=\"chatbox-container\">\n        <button\n          className=\"chatbox-btn\"\n          onClick={() => setToggleChat(!toggleChat)}\n        >\n          In-call Messages\n        </button>\n        {toggleChat ? <Chat /> : null}\n      </div>\n    </div>\n  );\n};\n\nexport default Room;","import React from \"react\";\nimport { useEffect } from \"react\";\nimport {\n  useHMSNotifications,\n  HMSNotificationTypes,\n} from \"@100mslive/hms-video-react\";\nimport { IoIosNotifications } from \"react-icons/io\";\n\nconst Notification = () => {\n  const notification = useHMSNotifications();\n\n\n  useEffect(() => {\n    if (!notification) {\n      return;\n    }\n\n    console.log(\"notification type\", notification.type);\n    console.log(\"data\", notification.data);\n\n    // you can use the following to show appropriate toast notifications for eg.\n    switch (notification.type) {\n      case HMSNotificationTypes.PEER_JOINED:\n        console.log(`${notification.data.name} joined`);\n        break;\n      case HMSNotificationTypes.PEER_LEFT:\n        console.log(`${notification.data.name} left`);\n        break;\n      case HMSNotificationTypes.NEW_MESSAGE:\n        console.log(\n          `${notification.data.message} received from ${notification.data.senderName}`\n        );\n        break;\n      case HMSNotificationTypes.ERROR:\n        console.log(\"[Error]\", notification.data);\n        console.log(\"[Error Code]\", notification.data.code);\n        break;\n      case HMSNotificationTypes.RECONNECTING:\n        console.log(\"[Reconnecting]\", notification.data);\n        break;\n      case HMSNotificationTypes.RECONNECTED:\n        console.log(\"[Reconnected]\");\n        break;\n      default:\n        break;\n    }\n  }, [notification]);\n\n  return (\n    <div className=\"notification-bar\">\n      {notification?.type}\n    </div>\n  );\n};\n\nexport default Notification;","\nimport JoinForm from \"./components/JoinForm\";\nimport \"./styles.css\";\nimport Room from \"./components/Room\";\nimport Notification from \"./components/Notifications\";\nimport { useEffect } from \"react\";\nimport {\n  selectIsConnectedToRoom,\n  useHMSActions,\n  useHMSStore,\n} from \"@100mslive/hms-video-react\";\nimport ButtonBar from \"./components/ButtonBar\";\n\nconst App = () => {\n  const isConnected = useHMSStore(selectIsConnectedToRoom);\n  const hmsActions = useHMSActions();\n\n  useEffect(() => {\n    window.onunload = () => {\n      if (isConnected) {\n        hmsActions.leave();\n      }\n    };\n  }, [hmsActions, isConnected]);\n\n  return (\n    <div className=\"App\" >\n      {isConnected ? (\n        <>\n          <Notification />\n          <Room />\n          <ButtonBar />\n        </>\n      ) : (\n        <JoinForm />\n      )}\n    </div>\n  );\n};\n\nexport default App;","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HMSRoomProvider, HMSThemeProvider } from \"@100mslive/hms-video-react\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n\n// wrapping the entire app with HMSRoomProvider and HMSThemeProvider\n\nReactDOM.render(\n  <HMSRoomProvider>\n    <HMSThemeProvider\n      appBuilder={{ theme: \"dark\" }}\n    >\n      <App />\n    </HMSThemeProvider>\n  </HMSRoomProvider>,\n  rootElement\n);"],"sourceRoot":""}